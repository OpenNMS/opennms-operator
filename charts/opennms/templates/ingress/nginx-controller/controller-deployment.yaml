# Source: ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
    app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
    app.kubernetes.io/component: controller-{{ .Values.Namespace }}
  name: ingress-nginx-controller
  namespace: {{ .Values.Namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
      app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
      app.kubernetes.io/component: controller-{{ .Values.Namespace }}
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-{{ .Values.Namespace }}
        app.kubernetes.io/instance: ingress-nginx-{{ .Values.Namespace }}
        app.kubernetes.io/component: controller-{{ .Values.Namespace }}
    spec:
      {{ if .Values.NodeRestrictions.Enabled }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.NodeRestrictions.Key }}"
                operator: In
                values:
                - {{ .Values.NodeRestrictions.Value }}
      {{ end }}
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: {{ .Values.Ingress.ControllerImage }}
          imagePullPolicy: IfNotPresent
          {{ if not .Values.TestDeploy }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx-{{ .Values.Namespace }}
            - --ingress-class=k8s.io/ingress-nginx-{{ .Values.Namespace }}
            - --configmap={{ .Values.Namespace }}/ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
            - --watch-ingress-without-class=true
            - --publish-status-address=localhost
          {{ end }}
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          {{ if not .Values.TestDeploy }}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          {{ end }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          {{ if not .Values.TestDeploy }}
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          {{ end }}
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      {{ if not .Values.TestDeploy }}
      volumes:
        - name: webhook-cert
          secret:
            secretName: ingress-nginx-admission
      {{ end }}
